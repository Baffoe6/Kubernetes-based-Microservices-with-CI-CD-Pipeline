name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  USERS_SERVICE_IMAGE: users-service
  PRODUCTS_SERVICE_IMAGE: products-service

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [users-service, products-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js (for users-service)
      if: matrix.service == 'users-service'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json

    - name: Install dependencies (users-service)
      if: matrix.service == 'users-service'
      working-directory: ${{ matrix.service }}
      run: npm ci

    - name: Run tests (users-service)
      if: matrix.service == 'users-service'
      working-directory: ${{ matrix.service }}
      run: npm test

    - name: Set up Python (for products-service)
      if: matrix.service == 'products-service'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies (products-service)
      if: matrix.service == 'products-service'
      working-directory: ${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests (products-service)
      if: matrix.service == 'products-service'
      working-directory: ${{ matrix.service }}
      run: pytest tests/ -v --cov=src

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [users-service, products-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [users-service, products-service]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install microservices-staging ./helm/microservices \
          --namespace microservices-staging \
          --create-namespace \
          --set usersService.image.tag=sha-${{ github.sha }} \
          --set productsService.image.tag=sha-${{ github.sha }} \
          --wait

    - name: Run health checks
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app=users-service -n microservices-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=products-service -n microservices-staging --timeout=300s

  deploy-production:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install microservices ./helm/microservices \
          --namespace microservices \
          --create-namespace \
          --set usersService.image.tag=sha-${{ github.sha }} \
          --set productsService.image.tag=sha-${{ github.sha }} \
          --wait

    - name: Run health checks
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app=users-service -n microservices --timeout=300s
        kubectl wait --for=condition=ready pod -l app=products-service -n microservices --timeout=300s

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
