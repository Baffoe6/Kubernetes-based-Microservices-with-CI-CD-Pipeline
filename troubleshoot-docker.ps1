# Docker Desktop Troubleshooting Guide for Windows

Write-Host "=== Docker Desktop Troubleshooting Guide ===" -ForegroundColor Cyan
Write-Host ""

Write-Host "üîç Current Issue: Docker Desktop engine not starting" -ForegroundColor Yellow
Write-Host ""

Write-Host "=== Quick Fixes (Try in order) ===" -ForegroundColor Green
Write-Host ""

Write-Host "1. üîÑ Complete Restart Sequence" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Close Docker Desktop completely" -ForegroundColor White
Write-Host "   ‚Ä¢ Open Task Manager (Ctrl+Shift+Esc)" -ForegroundColor White
Write-Host "   ‚Ä¢ End all Docker processes" -ForegroundColor White
Write-Host "   ‚Ä¢ Restart Docker Desktop as Administrator" -ForegroundColor White
Write-Host ""

Write-Host "2. üèÉ‚Äç‚ôÇÔ∏è Run as Administrator" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Right-click Docker Desktop" -ForegroundColor White
Write-Host "   ‚Ä¢ Select 'Run as administrator'" -ForegroundColor White
Write-Host "   ‚Ä¢ This often fixes permission issues" -ForegroundColor White
Write-Host ""

Write-Host "3. üîß Check Windows Features" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Press Win+R, type: optionalfeatures" -ForegroundColor White
Write-Host "   ‚Ä¢ Ensure these are enabled:" -ForegroundColor White
Write-Host "     ‚úì Hyper-V" -ForegroundColor Gray
Write-Host "     ‚úì Windows Subsystem for Linux" -ForegroundColor Gray
Write-Host "     ‚úì Virtual Machine Platform" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Restart computer after enabling" -ForegroundColor White
Write-Host ""

Write-Host "4. üêß Switch to WSL2 Backend" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Open Docker Desktop Settings" -ForegroundColor White
Write-Host "   ‚Ä¢ Go to General ‚Üí Use WSL2 based engine" -ForegroundColor White
Write-Host "   ‚Ä¢ Apply & Restart" -ForegroundColor White
Write-Host ""

Write-Host "5. üßπ Reset Docker Desktop" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Docker Desktop Settings ‚Üí Reset" -ForegroundColor White
Write-Host "   ‚Ä¢ 'Reset to factory defaults'" -ForegroundColor White
Write-Host "   ‚Ä¢ This will reset all settings" -ForegroundColor White
Write-Host ""

Write-Host "=== Alternative Solutions ===" -ForegroundColor Green
Write-Host ""

Write-Host "Option A: üì± Use a Different Tool" -ForegroundColor Yellow
Write-Host "‚Ä¢ Install Podman Desktop (Docker alternative)" -ForegroundColor White
Write-Host "‚Ä¢ Install Rancher Desktop" -ForegroundColor White
Write-Host "‚Ä¢ Use Docker in WSL2 directly" -ForegroundColor White
Write-Host ""

Write-Host "Option B: ‚òÅÔ∏è Use Cloud Development" -ForegroundColor Yellow
Write-Host "‚Ä¢ GitHub Codespaces" -ForegroundColor White
Write-Host "‚Ä¢ GitPod" -ForegroundColor White
Write-Host "‚Ä¢ Docker Desktop in a VM" -ForegroundColor White
Write-Host ""

Write-Host "Option C: üõ†Ô∏è Development Without Docker" -ForegroundColor Yellow
Write-Host "‚Ä¢ Run services natively (Node.js + Python)" -ForegroundColor White
Write-Host "‚Ä¢ Use local PostgreSQL and MongoDB" -ForegroundColor White
Write-Host "‚Ä¢ Skip containerization for development" -ForegroundColor White
Write-Host ""

Write-Host "=== Let's Try Native Development ===" -ForegroundColor Cyan
Write-Host ""
Write-Host "Since Docker is having issues, would you like to:" -ForegroundColor Yellow
Write-Host "1. Try the troubleshooting steps above" -ForegroundColor White
Write-Host "2. Set up native development (no Docker)" -ForegroundColor White
Write-Host "3. Use the existing CI/CD pipeline (works fine)" -ForegroundColor White
Write-Host ""

$choice = Read-Host "What would you like to do? (1/2/3)"

switch ($choice) {
    "1" {
        Write-Host ""
        Write-Host "üîß Troubleshooting Mode" -ForegroundColor Green
        Write-Host "Try the steps above, then run this command to test:" -ForegroundColor Yellow
        Write-Host "docker --version && docker info" -ForegroundColor Gray
        Write-Host ""
        Write-Host "If Docker works, try:" -ForegroundColor Yellow
        Write-Host ".\start-with-compose.ps1" -ForegroundColor Gray
    }
    
    "2" {
        Write-Host ""
        Write-Host "üèÉ‚Äç‚ôÇÔ∏è Setting up native development..." -ForegroundColor Green
        Write-Host ""
        Write-Host "This will set up your microservices to run locally without Docker:" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Users Service (Node.js) on port 3000" -ForegroundColor White
        Write-Host "‚Ä¢ Products Service (Python) on port 5000" -ForegroundColor White
        Write-Host "‚Ä¢ You'll need to install PostgreSQL and MongoDB separately" -ForegroundColor White
        Write-Host ""
        
        # Check if Node.js is available
        Write-Host "Checking Node.js..." -ForegroundColor Yellow
        try {
            $nodeVersion = node --version 2>$null
            Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Node.js not found. Install from: https://nodejs.org" -ForegroundColor Red
        }
        
        # Check if Python is available
        Write-Host "Checking Python..." -ForegroundColor Yellow
        try {
            $pythonVersion = python --version 2>$null
            Write-Host "‚úÖ Python: $pythonVersion" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Python not found. Install from: https://python.org" -ForegroundColor Red
        }
        
        Write-Host ""
        Write-Host "To run natively:" -ForegroundColor Cyan
        Write-Host "1. Install PostgreSQL: https://www.postgresql.org/download/" -ForegroundColor White
        Write-Host "2. Install MongoDB: https://www.mongodb.com/try/download/community" -ForegroundColor White
        Write-Host "3. Run: .\scripts\start-local.ps1" -ForegroundColor White
    }
    
    "3" {
        Write-Host ""
        Write-Host "‚úÖ CI/CD Pipeline Status" -ForegroundColor Green
        Write-Host ""
        Write-Host "Good news! Your CI/CD pipeline is working great:" -ForegroundColor Yellow
        Write-Host "‚Ä¢ ‚úÖ Tests pass for both services" -ForegroundColor Green
        Write-Host "‚Ä¢ ‚úÖ Docker images build successfully" -ForegroundColor Green
        Write-Host "‚Ä¢ ‚úÖ Images push to GitHub Container Registry" -ForegroundColor Green
        Write-Host "‚Ä¢ ‚úÖ All GitHub Actions workflows work" -ForegroundColor Green
        Write-Host ""
        Write-Host "The pipeline builds and tests your code automatically on every push." -ForegroundColor White
        Write-Host "Local Docker issues don't affect the production pipeline." -ForegroundColor White
        Write-Host ""
        Write-Host "To deploy to production, you'd need:" -ForegroundColor Cyan
        Write-Host "‚Ä¢ A Kubernetes cluster (cloud or on-premises)" -ForegroundColor White
        Write-Host "‚Ä¢ Proper secrets configuration" -ForegroundColor White
        Write-Host "‚Ä¢ Enable the deployment jobs in .github/workflows/ci-cd.yml" -ForegroundColor White
    }
    
    default {
        Write-Host ""
        Write-Host "No problem! You can:" -ForegroundColor Yellow
        Write-Host "‚Ä¢ Run this script again anytime" -ForegroundColor White
        Write-Host "‚Ä¢ Try the troubleshooting steps" -ForegroundColor White
        Write-Host "‚Ä¢ Use the working CI/CD pipeline" -ForegroundColor White
    }
}

Write-Host ""
Write-Host "=== Summary ===" -ForegroundColor Cyan
Write-Host "Your project is in great shape:" -ForegroundColor Green
Write-Host "‚Ä¢ ‚úÖ Both microservices are working" -ForegroundColor White
Write-Host "‚Ä¢ ‚úÖ Tests are passing" -ForegroundColor White
Write-Host "‚Ä¢ ‚úÖ CI/CD pipeline is functional" -ForegroundColor White
Write-Host "‚Ä¢ ‚úÖ Docker images build and deploy" -ForegroundColor White
Write-Host "‚Ä¢ ‚ö†Ô∏è Only local Docker Desktop needs fixing" -ForegroundColor Yellow
Write-Host ""
Write-Host "This is a common Docker Desktop issue on Windows and doesn't affect" -ForegroundColor White
Write-Host "your ability to develop, test, or deploy the application!" -ForegroundColor White
